[{"categories":["Signal Processing"],"contents":"Introduction The project is an Instrument Recognition Program with Matlab, featuring Time-Frequency Analysis method, Gabor Transform algorithm, Signal Feature Extraction, LBG Vector Quantization and K-means algorithm to achieve up to 80% recognition in musical instruments including Piano, Guitar, and Cello.\nfunction note = KeyGenerate(KeyNumber,tempo,beat,fs) % Set the t-axis of a note and the sampling interval 1/fs t = [0 : 1/fs : (60/tempo)*beat]; % The equation gives the frequency f of the nth key number f = 440 * 2^( (KeyNumber-49)/12 ); % Simulate the tone quality by \u0026#34;triangle decreasing\u0026#34; middle = ( t(1)+t(end) )/2; triangle = middle - abs(t-middle); triangle = triangle ./ max(triangle); % Using sin(2*pi*f*t) to be the basis of tone quality note = (sin(2*pi*f*t)).*triangle; end function MusicSynthesis() name = input(\u0026#39;Music Name: \u0026#39;,\u0026#34;s\u0026#34;); fs = input(\u0026#39;Sampling Rate fs: \u0026#39;); % Tempo: Lento 60, Adagio 80, Moderato 100, Allegro 120 tempo = input(\u0026#39;Tempo(60, 80, 100, 120): \u0026#39;); % Generate all the paino notes with 1 and 2 beat La0_1 = KeyGenerate( 1, tempo, 1, fs); La0_2 = KeyGenerate( 1, tempo, 2, fs); % A0 La_0_1 = KeyGenerate( 2, tempo, 1, fs); La_0_2 = KeyGenerate( 2, tempo, 2, fs); % A#0 Si0_1 = KeyGenerate( 3, tempo, 1, fs); Si0_2 = KeyGenerate( 3, tempo, 2, fs); % B0 Do0_1 = KeyGenerate( 4, tempo, 1, fs); Do0_2 = KeyGenerate( 4, tempo, 2, fs); % C0 Do_0_1 = KeyGenerate( 5, tempo, 1, fs); Do_0_2 = KeyGenerate( 5, tempo, 2, fs); % C#0 Re0_1 = KeyGenerate( 6, tempo, 1, fs); Re0_2 = KeyGenerate( 6, tempo, 2, fs); % D0 Re_0_1 = KeyGenerate( 7, tempo, 1, fs); Re_0_2 = KeyGenerate( 7, tempo, 2, fs); % D#0 Mi0_1 = KeyGenerate( 8, tempo, 1, fs); Mi0_2 = KeyGenerate( 8, tempo, 2, fs); % E0 Fa0_1 = KeyGenerate( 9, tempo, 1, fs); Fa0_2 = KeyGenerate( 9, tempo, 2, fs); % F0 Fa_0_1 = KeyGenerate(10, tempo, 1, fs); Fa_0_2 = KeyGenerate(10, tempo, 2, fs); % F#0 So0_1 = KeyGenerate(11, tempo, 1, fs); So0_2 = KeyGenerate(11, tempo, 2, fs); % G0 So_0_1 = KeyGenerate(12, tempo, 1, fs); So_0_2 = KeyGenerate(12, tempo, 2, fs); % G#0 La1_1 = KeyGenerate(13, tempo, 1, fs); La1_2 = KeyGenerate(13, tempo, 2, fs); % A1 La_1_1 = KeyGenerate(14, tempo, 1, fs); La_1_2 = KeyGenerate(14, tempo, 2, fs); % A#1 Si1_1 = KeyGenerate(15, tempo, 1, fs); Si1_2 = KeyGenerate(15, tempo, 2, fs); % B1 Do1_1 = KeyGenerate(16, tempo, 1, fs); Do1_2 = KeyGenerate(16, tempo, 2, fs); % C1 Do_1_1 = KeyGenerate(17, tempo, 1, fs); Do_1_2 = KeyGenerate(17, tempo, 2, fs); % C#1 Re1_1 = KeyGenerate(18, tempo, 1, fs); Re1_2 = KeyGenerate(18, tempo, 2, fs); % D1 Re_1_1 = KeyGenerate(19, tempo, 1, fs); Re_1_2 = KeyGenerate(19, tempo, 2, fs); % D#1 Mi1_1 = KeyGenerate(20, tempo, 1, fs); Mi1_2 = KeyGenerate(20, tempo, 2, fs); % E1 Fa1_1 = KeyGenerate(21, tempo, 1, fs); Fa1_2 = KeyGenerate(21, tempo, 2, fs); % F1 Fa_1_1 = KeyGenerate(22, tempo, 1, fs); Fa_1_2 = KeyGenerate(22, tempo, 2, fs); % F#1 So1_1 = KeyGenerate(23, tempo, 1, fs); So1_2 = KeyGenerate(23, tempo, 2, fs); % G1 So_1_1 = KeyGenerate(24, tempo, 1, fs); So_1_2 = KeyGenerate(24, tempo, 2, fs); % G#1 La2_1 = KeyGenerate(25, tempo, 1, fs); La2_2 = KeyGenerate(25, tempo, 2, fs); % A2 La_2_1 = KeyGenerate(26, tempo, 1, fs); La_2_2 = KeyGenerate(26, tempo, 2, fs); % A#2 Si2_1 = KeyGenerate(27, tempo, 1, fs); Si2_2 = KeyGenerate(27, tempo, 2, fs); % B2 Do2_1 = KeyGenerate(28, tempo, 1, fs); Do2_2 = KeyGenerate(28, tempo, 2, fs); % C2 Do_2_1 = KeyGenerate(29, tempo, 1, fs); Do_2_2 = KeyGenerate(29, tempo, 2, fs); % C#2 Re2_1 = KeyGenerate(30, tempo, 1, fs); Re2_2 = KeyGenerate(30, tempo, 2, fs); % D2 Re_2_1 = KeyGenerate(31, tempo, 1, fs); Re_2_2 = KeyGenerate(31, tempo, 2, fs); % D#2 Mi2_1 = KeyGenerate(32, tempo, 1, fs); Mi2_2 = KeyGenerate(32, tempo, 2, fs); % E2 Fa2_1 = KeyGenerate(33, tempo, 1, fs); Fa2_2 = KeyGenerate(33, tempo, 2, fs); % F2 Fa_2_1 = KeyGenerate(34, tempo, 1, fs); Fa_2_2 = KeyGenerate(34, tempo, 2, fs); % F#2 So2_1 = KeyGenerate(35, tempo, 1, fs); So2_2 = KeyGenerate(35, tempo, 2, fs); % G2 So_2_1 = KeyGenerate(36, tempo, 1, fs); So_2_2 = KeyGenerate(36, tempo, 2, fs); % G#2 La3_1 = KeyGenerate(37, tempo, 1, fs); La3_2 = KeyGenerate(37, tempo, 2, fs); % A3 La_3_1 = KeyGenerate(38, tempo, 1, fs); La_3_2 = KeyGenerate(38, tempo, 2, fs); % A#3 Si3_1 = KeyGenerate(39, tempo, 1, fs); Si3_2 = KeyGenerate(39, tempo, 2, fs); % B3 Do3_1 = KeyGenerate(40, tempo, 1, fs); Do3_2 = KeyGenerate(40, tempo, 2, fs); % C3 Do_3_1 = KeyGenerate(41, tempo, 1, fs); Do_3_2 = KeyGenerate(41, tempo, 2, fs); % C#3 Re3_1 = KeyGenerate(42, tempo, 1, fs); Re3_2 = KeyGenerate(42, tempo, 2, fs); % D3 Re_3_1 = KeyGenerate(43, tempo, 1, fs); Re_3_2 = KeyGenerate(43, tempo, 2, fs); % D#3 Mi3_1 = KeyGenerate(44, tempo, 1, fs); Mi3_2 = KeyGenerate(44, tempo, 2, fs); % E3 Fa3_1 = KeyGenerate(45, tempo, 1, fs); Fa3_2 = KeyGenerate(45, tempo, 2, fs); % F3 Fa_3_1 = KeyGenerate(46, tempo, 1, fs); Fa_3_2 = KeyGenerate(46, tempo, 2, fs); % F#3 So3_1 = KeyGenerate(47, tempo, 1, fs); So3_2 = KeyGenerate(47, tempo, 2, fs); % G3 So_3_1 = KeyGenerate(48, tempo, 1, fs); So_3_2 = KeyGenerate(48, tempo, 2, fs); % G#3 La4_1 = KeyGenerate(49, tempo, 1, fs); La4_2 = KeyGenerate(49, tempo, 2, fs); % A4 La_4_1 = KeyGenerate(50, tempo, 1, fs); La_4_2 = KeyGenerate(50, tempo, 2, fs); % A#4 Si4_1 = KeyGenerate(51, tempo, 1, fs); Si4_2 = KeyGenerate(51, tempo, 2, fs); % B4 Do4_1 = KeyGenerate(52, tempo, 1, fs); Do4_2 = KeyGenerate(52, tempo, 2, fs); % C4 # middle C Do_4_1 = KeyGenerate(53, tempo, 1, fs); Do_4_2 = KeyGenerate(53, tempo, 2, fs); % C#4 Re4_1 = KeyGenerate(54, tempo, 1, fs); Re4_2 = KeyGenerate(54, tempo, 2, fs); % D4 Re_4_1 = KeyGenerate(55, tempo, 1, fs); Re_4_2 = KeyGenerate(55, tempo, 2, fs); % D#4 Mi4_1 = KeyGenerate(56, tempo, 1, fs); Mi4_2 = KeyGenerate(56, tempo, 2, fs); % E4 Fa4_1 = KeyGenerate(57, tempo, 1, fs); Fa4_2 = KeyGenerate(57, tempo, 2, fs); % F4 Fa_4_1 = KeyGenerate(58, tempo, 1, fs); Fa_4_2 = KeyGenerate(58, tempo, 2, fs); % F#4 So4_1 = KeyGenerate(59, tempo, 1, fs); So4_2 = KeyGenerate(59, tempo, 2, fs); % G4 So_4_1 = KeyGenerate(60, tempo, 1, fs); So_4_2 = KeyGenerate(60, tempo, 2, fs); % G#4 La5_1 = KeyGenerate(61, tempo, 1, fs); La5_2 = KeyGenerate(61, tempo, 2, fs); % A5 La_5_1 = KeyGenerate(62, tempo, 1, fs); La_5_2 = KeyGenerate(62, tempo, 2, fs); % A#5 Si5_1 = KeyGenerate(63, tempo, 1, fs); Si5_2 = KeyGenerate(63, tempo, 2, fs); % B5 Do5_1 = KeyGenerate(64, tempo, 1, fs); Do5_2 = KeyGenerate(64, tempo, 2, fs); % C5 Do_5_1 = KeyGenerate(65, tempo, 1, fs); Do_5_2 = KeyGenerate(65, tempo, 2, fs); % C#5 Re5_1 = KeyGenerate(66, tempo, 1, fs); Re5_2 = KeyGenerate(66, tempo, 2, fs); % D5 Re_5_1 = KeyGenerate(67, tempo, 1, fs); Re_5_2 = KeyGenerate(67, tempo, 2, fs); % D#5 Mi5_1 = KeyGenerate(68, tempo, 1, fs); Mi5_2 = KeyGenerate(68, tempo, 2, fs); % E5 Fa5_1 = KeyGenerate(69, tempo, 1, fs); Fa5_2 = KeyGenerate(69, tempo, 2, fs); % F5 Fa_5_1 = KeyGenerate(70, tempo, 1, fs); Fa_5_2 = KeyGenerate(70, tempo, 2, fs); % F#5 So5_1 = KeyGenerate(71, tempo, 1, fs); So5_2 = KeyGenerate(71, tempo, 2, fs); % G5 So_5_1 = KeyGenerate(72, tempo, 1, fs); So_5_2 = KeyGenerate(72, tempo, 2, fs); % G#5 La6_1 = KeyGenerate(73, tempo, 1, fs); La6_2 = KeyGenerate(73, tempo, 2, fs); % A6 La_6_1 = KeyGenerate(74, tempo, 1, fs); La_6_2 = KeyGenerate(74, tempo, 2, fs); % A#6 Si6_1 = KeyGenerate(75, tempo, 1, fs); Si6_2 = KeyGenerate(75, tempo, 2, fs); % B6 Do6_1 = KeyGenerate(76, tempo, 1, fs); Do6_2 = KeyGenerate(76, tempo, 2, fs); % C6 Do_6_1 = KeyGenerate(77, tempo, 1, fs); Do_6_2 = KeyGenerate(77, tempo, 2, fs); % C#6 Re6_1 = KeyGenerate(78, tempo, 1, fs); Re6_2 = KeyGenerate(78, tempo, 2, fs); % D6 Re_6_1 = KeyGenerate(79, tempo, 1, fs); Re_6_2 = KeyGenerate(79, tempo, 2, fs); % D#6 Mi6_1 = KeyGenerate(80, tempo, 1, fs); Mi6_2 = KeyGenerate(80, tempo, 2, fs); % E6 Fa6_1 = KeyGenerate(81, tempo, 1, fs); Fa6_2 = KeyGenerate(81, tempo, 2, fs); % F6 Fa_6_1 = KeyGenerate(82, tempo, 1, fs); Fa_6_2 = KeyGenerate(82, tempo, 2, fs); % F#6 So6_1 = KeyGenerate(83, tempo, 1, fs); So6_2 = KeyGenerate(83, tempo, 2, fs); % G6 So_6_1 = KeyGenerate(84, tempo, 1, fs); So_6_2 = KeyGenerate(84, tempo, 2, fs); % G#6 La7_1 = KeyGenerate(85, tempo, 1, fs); La7_2 = KeyGenerate(85, tempo, 2, fs); % A7 La_7_1 = KeyGenerate(86, tempo, 1, fs); La_7_2 = KeyGenerate(86, tempo, 2, fs); % A#7 Si7_1 = KeyGenerate(87, tempo, 1, fs); Si7_2 = KeyGenerate(87, tempo, 2, fs); % B7 Do7_1 = KeyGenerate(88, tempo, 1, fs); Do7_2 = KeyGenerate(88, tempo, 2, fs); % C7 Do_7_1 = KeyGenerate(89, tempo, 1, fs); Do_7_2 = KeyGenerate(89, tempo, 2, fs); % C#7 Re7_1 = KeyGenerate(90, tempo, 1, fs); Re7_2 = KeyGenerate(90, tempo, 2, fs); % D7 Re_7_1 = KeyGenerate(91, tempo, 1, fs); Re_7_2 = KeyGenerate(91, tempo, 2, fs); % D#7 Mi7_1 = KeyGenerate(92, tempo, 1, fs); Mi7_2 = KeyGenerate(92, tempo, 2, fs); % E7 Fa7_1 = KeyGenerate(93, tempo, 1, fs); Fa7_2 = KeyGenerate(93, tempo, 2, fs); % F7 Fa_7_1 = KeyGenerate(94, tempo, 1, fs); Fa_7_2 = KeyGenerate(94, tempo, 2, fs); % F#7 So7_1 = KeyGenerate(95, tempo, 1, fs); So7_2 = KeyGenerate(95, tempo, 2, fs); % G7 So_7_1 = KeyGenerate(96, tempo, 1, fs); So_7_2 = KeyGenerate(96, tempo, 2, fs); % G#7 La8_1 = KeyGenerate( 97, tempo, 1, fs); La8_2 = KeyGenerate( 97, tempo, 2, fs); % A8 La_8_1 = KeyGenerate( 98, tempo, 1, fs); La_8_2 = KeyGenerate( 98, tempo, 2, fs); % A#8 Si8_1 = KeyGenerate( 99, tempo, 1, fs); Si8_2 = KeyGenerate( 99, tempo, 2, fs); % B8 Do8_1 = KeyGenerate(100, tempo, 1, fs); Do8_2 = KeyGenerate(100, tempo, 2, fs); % C8 Do_8_1 = KeyGenerate(101, tempo, 1, fs); Do_8_2 = KeyGenerate(101, tempo, 2, fs); % C#8 Re8_1 = KeyGenerate(102, tempo, 1, fs); Re8_2 = KeyGenerate(102, tempo, 2, fs); % D8 Re_8_1 = KeyGenerate(103, tempo, 1, fs); Re_8_2 = KeyGenerate(103, tempo, 2, fs); % D#8 Mi8_1 = KeyGenerate(104, tempo, 1, fs); Mi8_2 = KeyGenerate(104, tempo, 2, fs); % E8 Fa8_1 = KeyGenerate(105, tempo, 1, fs); Fa8_2 = KeyGenerate(105, tempo, 2, fs); % F8 Fa_8_1 = KeyGenerate(106, tempo, 1, fs); Fa_8_2 = KeyGenerate(106, tempo, 2, fs); % F#8 So8_1 = KeyGenerate(107, tempo, 1, fs); So8_2 = KeyGenerate(107, tempo, 2, fs); % G8 So_8_1 = KeyGenerate(108, tempo, 1, fs); So_8_2 = KeyGenerate(108, tempo, 2, fs); % G#8 La4_0 = KeyGenerate(49, tempo, 1/2, fs); La4_2 = KeyGenerate(49, tempo, 2, fs); % A4 La_4_0 = KeyGenerate(50, tempo, 1/2, fs); La_4_2 = KeyGenerate(50, tempo, 2, fs); % A#4 Si4_0 = KeyGenerate(51, tempo, 1/2, fs); Si4_2 = KeyGenerate(51, tempo, 2, fs); % B4 Do4_0 = KeyGenerate(52, tempo, 1/2, fs); Do4_2 = KeyGenerate(52, tempo, 2, fs); % C4 # middle C Do_4_0 = KeyGenerate(53, tempo, 1/2, fs); Do_4_2 = KeyGenerate(53, tempo, 2, fs); % C#4 Re4_0 = KeyGenerate(54, tempo, 1/2, fs); Re4_2 = KeyGenerate(54, tempo, 2, fs); % D4 Re_4_0 = KeyGenerate(55, tempo, 1/2, fs); Re_4_2 = KeyGenerate(55, tempo, 2, fs); % D#4 Mi4_0 = KeyGenerate(56, tempo, 1/2, fs); Mi4_2 = KeyGenerate(56, tempo, 2, fs); % E4 Fa4_0 = KeyGenerate(57, tempo, 1/2, fs); Fa4_2 = KeyGenerate(57, tempo, 2, fs); % F4 Fa_4_0 = KeyGenerate(58, tempo, 1/2, fs); Fa_4_2 = KeyGenerate(58, tempo, 2, fs); % F#4 So4_0 = KeyGenerate(59, tempo, 1/2, fs); So4_2 = KeyGenerate(59, tempo, 2, fs); % G4 So_4_0 = KeyGenerate(60, tempo, 1/2, fs); So_4_2 = KeyGenerate(60, tempo, 2, fs); % G#4 La5_0 = KeyGenerate(61, tempo, 1/2, fs); La5_2 = KeyGenerate(61, tempo, 2, fs); % A5 La_5_0 = KeyGenerate(62, tempo, 1/2, fs); La_5_2 = KeyGenerate(62, tempo, 2, fs); % A#5 Si5_0 = KeyGenerate(63, tempo, 1/2, fs); Si5_2 = KeyGenerate(63, tempo, 2, fs); % B5 Do5_0 = KeyGenerate(64, tempo, 1/2, fs); Do5_2 = KeyGenerate(64, tempo, 2, fs); % C5 Do_5_0 = KeyGenerate(65, tempo, 1/2, fs); Do_5_2 = KeyGenerate(65, tempo, 2, fs); % C#5 Re5_0 = KeyGenerate(66, tempo, 1/2, fs); Re5_2 = KeyGenerate(66, tempo, 2, fs); % D5 Re_5_0 = KeyGenerate(67, tempo, 1/2, fs); Re_5_2 = KeyGenerate(67, tempo, 2, fs); % D#5 Mi5_0 = KeyGenerate(68, tempo, 1/2, fs); Mi5_2 = KeyGenerate(68, tempo, 2, fs); % E5 Fa5_0 = KeyGenerate(69, tempo, 1/2, fs); Fa5_2 = KeyGenerate(69, tempo, 2, fs); % F5 Fa_5_0 = KeyGenerate(70, tempo, 1/2, fs); Fa_5_2 = KeyGenerate(70, tempo, 2, fs); % F#5 So5_0 = KeyGenerate(71, tempo, 1/2, fs); So5_2 = KeyGenerate(71, tempo, 2, fs); % G5 So_5_0 = KeyGenerate(72, tempo, 1/2, fs); So_5_2 = KeyGenerate(72, tempo, 2, fs); % G#5 Fa4_01 = KeyGenerate(57, tempo, 3/4, fs); Re_4_01 = KeyGenerate(55, tempo, 1/4, fs); So4_4 = KeyGenerate(59, tempo, 4, fs); Re_4_4 = KeyGenerate(55, tempo, 4, fs); Fa4_4 = KeyGenerate(57, tempo, 4, fs); % Attack on titan: The Rumbling song = [ Re_4_0, Fa4_0, So_4_1, So4_0, So4_2, So_4_0, La_5_1, Fa4_2, ... Fa4_0, Re_4_0, Fa4_0, Re_4_0, Fa4_0, So4_0, So4_4 ... Re_4_0, Fa4_0, So_4_1, So4_0, So4_2, So_4_1, So4_0, So4_2, Fa4_1, Re_4_0, Re_4_4, ... Re_4_0, Fa4_0, So_4_1, So4_0, So4_2, So_4_0, La_5_1, Fa4_2, ... Fa4_0, Re_4_0, Fa4_0, Re_4_0, Fa4_0, So4_0, So4_4, ... Fa4_0, Re_4_0, Fa4_0, Re_4_0, Fa4_1, Re_4_0, Fa4_1, Re_4_0, Fa4_1, Fa_4_1, Fa4_4, ... So4_1, Do4_2, So4_1, Do4_2, Do4_0, La_5_1, So_4_1, So4_1, Do4_2, So4_1, Do4_0, So4_0, So4_1]; sound(song, fs); audiowrite(strcat(name, \u0026#39;.wav\u0026#39;), song, fs); end ","permalink":"https://NTUneillee.github.io/blog/post2/","tags":["Signal Processing","Matlab","Music"],"title":"Basic Music Synthesis Project"},{"categories":["Signal Processing"],"contents":"Introduction The project is an Instrument Recognition Program with Matlab, featuring Time-Frequency Analysis method, Gabor Transform algorithm, Signal Feature Extraction, LBG Vector Quantization and K-means algorithm to achieve up to 80% recognition in musical instruments including Piano, Guitar, and Cello.\nLibrary library_cello1.mat, library_cello2.mat, library_cello3.mat, library_guitar1.mat, library_guitar2.mat, library_guitar3.mat, library_piano1.mat, library_piano2.mat, library_piano3.mat are the Libraries that I collected from thousnad of instrument music signals.\nProgram Code clear; close all; clc; [a, fs] = audioread(\u0026#39;music.wav\u0026#39;); segmentation = 5; % =================================================================== % Main Algorithm of Gabor Transform % =================================================================== x = a(:,1); tau = 0 : 1/44100 : 3.2; dt = 0.01; df = 1; t = 0 : dt : max(tau); f = 20 : df : 2500; sigma = 200; dt = t(2)-t(1); df = f(2)-f(1); dtau = tau(2)-tau(1); S = dt/dtau; C = length(t); F = length(f); T = length(tau); N = 1 / (df*dtau); B = 1.9143 / (sigma^(1/2)); Q = round( B/dtau ); n0 = tau(1) / dtau; c0 = t(1) / dt; m0 = f(1) / df; X = zeros(C,F); x1 = zeros(1,N); window = (sigma^(1/4)) * exp( -sigma*pi*( (Q-( 0:N-1 ))*dtau ).^2 ); for n = c0 :( c0+C-1 ) window_const = dtau * exp( (-1j*2*pi*( n*S-Q ) ) .* ( m0:(m0+F-1) )./N); for q = 0 : N-1 if ( (q\u0026lt;=(2*Q) ) \u0026amp;\u0026amp; ( n*S-Q+q\u0026gt;=0 ) \u0026amp;\u0026amp; ( n*S-Q+q+1\u0026lt;=T ) ) x1(q+1) = x( n*S-Q+q+1 ); else x1(q+1) = 0; end end X1 = fft( (window.*x1), N); X( (n-c0)+1, :) = window_const .* X1( m0+1 : ( (m0+F-1)+1 ) ); end y = X\u0026#39;; % =================================================================== % Convolution to g[n,m] and find Instantaneous Frequency % =================================================================== f0 = 20; L = (2*(f0/dt)); for n_ = 1:5 % n_ = n+3 for m_ = 1: (2*L+1) % m_ = L+(L+1) g(n_,m_) = exp(-(((m_-(L+1))*df)^2))/f0^2; end end Xs = conv2(abs(y),g\u0026#39;,\u0026#39;same\u0026#39;); % Create Threshold matrix of instantaneous frequency threshold_value = max(max(abs(Xs))) * 0.01; threshold = zeros(F,C); threshold = threshold + threshold_value; % Create Instantaneous Frequency zero matrix for later storing data InstantaneousFreq = zeros( size(Xs) ); for m = 1+1 : F-1 % to avoid reaching invalid index for n = 1 : C % find max frequency to become instantaneous frequency if ( Xs(m,n)\u0026gt;Xs(m-1,n) ) \u0026amp;\u0026amp; ( Xs(m,n)\u0026gt;Xs(m+1,n) ) \u0026amp;\u0026amp; ( abs((Xs(m,n))) \u0026gt; threshold(m,n) ) InstantaneousFreq(m,n) = 1; else InstantaneousFreq(m,n) = 0; end end end % =================================================================== % Connect [m,n] to create clear Instantaneous Frequency line % =================================================================== % create Clear Frequency data matrix for later operation ClearFrequency = []; for i = 1 : F % extract every frequency line row by row tmp = InstantaneousFreq(i,:); % identify the index of clear frequency line index = find( abs( real(tmp) ) \u0026gt; 0.0001 ); for j = 1 : C if ismember(j, index) % let the clear frequency line element to 1 tmp(j) = 1; else % remove the unclear frequemcy line tmp(j) = 0; end end % label the different region of clear frequemcy line tmp = bwlabel(tmp, 8); % find how many number of clear frequency line region tmp_max = max(tmp, [], \u0026#39;all\u0026#39;); for k = 1 : tmp_max if size( find( tmp==k ) ) \u0026lt; segmentation % Segmentation Variable tmp( find( tmp==k ) ) = 0; else tmp( find( tmp==k ) ) = 1; end end % store data in Clear Frequecny matrix ClearFrequency = [ ClearFrequency ; tmp ]; end % show the plot of siganl after Gabor Transform figure; image(t,f,abs(y)/max(max(abs(y)))*400)\tcolormap(gray(256))\tset(gca,\u0026#39;Ydir\u0026#39;,\u0026#39;normal\u0026#39;)\tset(gca,\u0026#39;Fontsize\u0026#39;,12)\txlabel(\u0026#39;Time (Sec)\u0026#39;,\u0026#39;Fontsize\u0026#39;,12)\tylabel(\u0026#39;Frequency (Hz)\u0026#39;,\u0026#39;Fontsize\u0026#39;,12)\t% show the plot of Instantaneous Frequency figure; image(t,f,abs(InstantaneousFreq)/max(max(abs(InstantaneousFreq)))*400)\tcolormap(gray(256))\tset(gca,\u0026#39;Ydir\u0026#39;,\u0026#39;normal\u0026#39;)\tset(gca,\u0026#39;Fontsize\u0026#39;,12)\txlabel(\u0026#39;Time (Sec)\u0026#39;,\u0026#39;Fontsize\u0026#39;,12)\tylabel(\u0026#39;Frequency (Hz)\u0026#39;,\u0026#39;Fontsize\u0026#39;,12)\t% show the plot of Clear Instantaneous Frequency figure; image(t,f,abs(ClearFrequency)/max(max(abs(ClearFrequency)))*400)\tcolormap(gray(256))\tset(gca,\u0026#39;Ydir\u0026#39;,\u0026#39;normal\u0026#39;)\tset(gca,\u0026#39;Fontsize\u0026#39;,12)\txlabel(\u0026#39;Time (Sec)\u0026#39;,\u0026#39;Fontsize\u0026#39;,12)\tylabel(\u0026#39;Frequency (Hz)\u0026#39;,\u0026#39;Fontsize\u0026#39;,12)\t% =================================================================== % Find the MAX time sample number of all instantaneous frequency % =================================================================== % create FreqTimeSample data matrix for later operation FreqTimeSample = []; % label the different region of clear frequemcy line ClearFrequency_label = bwlabel( ClearFrequency, 8 ); % find how many number of clear frequency line region label_max = max(ClearFrequency_label, [], \u0026#39;all\u0026#39;); for i = 1 : label_max % find the number of time sample of every instantaneous frequency FreqTimeSample_tmp = size( find(ClearFrequency_label == i) , 1); % store data in FreqTimeSample matrix FreqTimeSample = [ FreqTimeSample FreqTimeSample_tmp ]; end % find the MAX time sample number of instantaneous frequency MAX_FreqTimeSample = max(FreqTimeSample); % =================================================================== % Find Real Frequency Value and its Time data of all frequency % =================================================================== % create Real Frequency Value data matrix for later operation RealFreqValue = []; % TimeRange will lose 1 data after sampling (round down) MaxSampleNum = MAX_FreqTimeSample - 1; % initial setting of Time Data for all time sample of frequency TimeData = zeros(label_max, MaxSampleNum); % initial setting of Frequency Value Data for all time sample of frequency % indexes of FreqValueData are correspond to its TimeData FreqValueData = zeros(label_max , MaxSampleNum); [ row, column ] = size(ClearFrequency); for i = 1 : label_max [r, c] = find( ClearFrequency_label == i ); % calculate the Real Frequency Value of Instaneous frequency FreqValue = mean(r) + 20; % correction coefficient ylim [20 1001] % store data in Real Frequency Value matrix RealFreqValue = [ RealFreqValue FreqValue ]; % calculate the Real Time Value of every sample and find its min and max c_min = min(c) * (1.6/column); c_max = max(c) * (1.6/column); % TimeRange store the data of all time sample for all Freq region TimeRange = [ c_min : dt : c_max ]; for k = 1 : size( TimeRange,2 ) % how many time sample in this region TimeData(i,k) = TimeRange(k); FreqValueData(i,k) = FreqValue; end end % =================================================================== % Find frequency energy ratio of all primary frequency region % =================================================================== E1_set = []; E2_set = []; E3_set = []; EnergyRatioE2E1_set = []; EnergyRatioE3E1_set = []; E_onset_set = []; E_offset_set = []; E_all_set =[]; EnergyRatioOn_set = []; EnergyRatioOff_set = []; for FrequencyRegion = 1 : label_max y_value = (abs(y)).^2; [r, c] = find( ClearFrequency_label == FrequencyRegion ); fmin1 = 0.5 * RealFreqValue(FrequencyRegion); fmax1 = 1.5 * RealFreqValue(FrequencyRegion); min_row1 = round(fmin1) - 20; max_row1 = round(fmax1) - 20; if min_row1 \u0026lt; 1 min_row1 = 1; elseif max_row1 \u0026gt; F max_row1 = F; end E1 = sum( y_value( min_row1 : max_row1 , min(c) : max(c) ) , \u0026#39;all\u0026#39;); E1_set = [ E1_set E1 ]; fmin2 = 1.5 * RealFreqValue(FrequencyRegion); fmax2 = 2.5 * RealFreqValue(FrequencyRegion); min_row2 = round(fmin2) - 20; max_row2 = round(fmax2) - 20; if min_row2 \u0026lt; 1 min_row2 = 1; elseif max_row2 \u0026gt; F max_row2 = F; end E2 = sum( y_value( min_row2 : max_row2 , min(c) : max(c) ) , \u0026#39;all\u0026#39;); E2_set = [ E2_set E2 ]; fmin3 = 2.5 * RealFreqValue(FrequencyRegion); fmax3 = 3.5 * RealFreqValue(FrequencyRegion); min_row3 = round(fmin3) - 20; max_row3 = round(fmax3) - 20; if min_row3 \u0026lt; 1 min_row3 = 1; elseif max_row3 \u0026gt; F max_row3 = F; end ​ E3 = sum( y_value( min_row3 : max_row3 , min(c) : max(c) ) , \u0026#39;all\u0026#39;); ​ E3_set = [ E3_set E3 ]; ​ ​ EnergyRatioE2E1 = E2 / E1; ​ EnergyRatioE2E1_set = [ EnergyRatioE2E1_set EnergyRatioE2E1 ]; ​ ​ EnergyRatioE3E1 = E3 / E1; ​ EnergyRatioE3E1_set = [ EnergyRatioE3E1_set EnergyRatioE3E1 ]; ​ ​ begin_all = min(c); ​ finish_all = max(c); ​ begin_onset = min(c); ​ finish_onset = min(c) + round(( (max(c)-min(c)) * 0.1 )); ​ begin_offset = min(c) + round(( (max(c)-min(c)) * 0.9 )); ​ finish_offset = max(c); ​ ​ LowLimit = round( ( RealFreqValue(FrequencyRegion) -20 ) - 5 ); ​ HighLimit = round( ( RealFreqValue(FrequencyRegion) -20 ) + 5 ); ​ ​ if ( LowLimit \u0026lt; 1 ) ​ LowLimit = 1; ​ elseif (HighLimit \u0026gt; F ) ​ HighLimit = F; ​ end ​ ​ E_onset = sum( y_value( LowLimit:HighLimit, begin_onset:finish_onset ) , \u0026#39;all\u0026#39;); ​ E_onset_set = [ E_onset_set E_onset ]; ​ ​ E_offset = sum( y_value( LowLimit:HighLimit, begin_offset:finish_offset ) , \u0026#39;all\u0026#39;); ​ E_offset_set = [ E_offset_set E_offset ]; ​ ​ E_all = sum( y_value( LowLimit:HighLimit, begin_all:finish_all ) , \u0026#39;all\u0026#39;); ​ E_all_set =[ E_all_set E_all ]; ​ ​ EnergyRatioOn = E_onset / E_all; ​ EnergyRatioOn_set = [ EnergyRatioOn_set EnergyRatioOn ]; ​ ​ EnergyRatioOff = E_offset / E_all; ​ EnergyRatioOff_set = [ EnergyRatioOff_set EnergyRatioOff ]; ​ end % =================================================================== % Find error between Real Frequency \u0026amp; its second-order approximation % =================================================================== % create error data matrix of each frequency region for later operation error_set = []; for FrequencyRegion = 1 : label_max % create Frequency column vector data of every sample point B = []; ​ for i = 1 : MaxSampleNum ​ ​ % extract the TimeData of every sample point row by row ​ n_FreqTimeSample = TimeData( FrequencyRegion, : ); ​ % find B = [ m m*n m*n^2 ]\u0026#39; column vector for approximation ​ B_tmp = RealFreqValue( FrequencyRegion ) * n_FreqTimeSample(i) .^ (0:2); ​ ​ % the element of B_tmp that not exist is time = 0 ​ if ( B_tmp(2) == 0 ) \u0026amp;\u0026amp; ( B_tmp(3) == 0) ​ B_tmp(1) = 0; ​ end ​ % change the element of not exist B_tmp become zero column vector ​ ​ B = [ B B_tmp\u0026#39;]; ​ ​ end ​ ​ % create approximation coefficient for every sample point ​ S = []; ​ for i = 1 : MaxSampleNum ​ ​ % extract the Frequemcy data of every region column by column ​ B_column = B(:,i); ​ ​ % create A matrix for second-order approximation ​ for n = 1:3 ​ for m = 1:3 ​ for k = 1:3 ​ A(m,k) = ( n_FreqTimeSample(i) )^( m+k-2 ); ​ end ​ end ​ end ​ ​ % lower precision for lower computation ​ A = round(A,1); ​ % inverse A matrix for calculate approximation coefficient ​ S_tmp = pinv(A) * B_column; ​ S = [S S_tmp]; ​ ​ end ​ % create approzimation B of each frequency region for later operation ​ B_approximation_set= []; ​ ​ for i = 1 : MaxSampleNum ​ ​ % extract the Coefficient data of every region column by column ​ S_column = S(:,i); ​ ​ % create A matrix for second-order approximation ​ for n = 1:3 ​ for m = 1:3 ​ for k = 1:3 ​ A(m,k) = ( n_FreqTimeSample(i) )^( m+k-2 ); ​ end ​ end ​ end ​ ​ % approximate the frequency of each time samplefor each region ​ B_approximation_matrix = A*S_column; ​ B_approximation_set = [ B_approximation_set B_approximation_matrix ]; ​ ​ end ​ ​ for i = 1 : MaxSampleNum ​ ​ % some sample point does not exist so its B_approximation will be 0 ​ % convert 0 to eps to avoid later operation problem (0/0=InF) ​ if ( B_approximation_set(1,i) == 0 ) ​ B_approximation_set(1,i) = eps; ​ end ​ ​ % some frequency point does not exist so its Freq data will be 0 ​ % convert 0 to eps to avoid later operation problem (0/0=InF) ​ if ( FreqValueData(FrequencyRegion,i) == 0 ) ​ FreqValueData(FrequencyRegion,i) = eps; ​ end ​ ​ end ​ ​ % extract the data of approximation frequency we need in the first row ​ B_approximation = B_approximation_set(1,:); ​ % extract the data of real frequency we need row by row ​ FreqValueData_row = FreqValueData(FrequencyRegion,:); ​ ​ % calculate error data row by row for each region ​ error = sum(abs((B_approximation-FreqValueData_row) ./ FreqValueData_row)) / (MaxSampleNum); ​ error_percentage = round( error*100, 2 ); ​ ​ error_set = [ error_set error_percentage ]; end % find total error for all frequency region total_error = sum(error_set)/size(error_set,2); AllData = [ RealFreqValue ; EnergyRatioE2E1_set ; EnergyRatioE3E1_set; ... EnergyRatioOn_set ; EnergyRatioOff_set ; error_set ] HighFreqE2E1 = []; HighFreqE3E1 = []; HighFreqOn = []; HighFreqOff = []; HighFreqError = []; MiddleFreqE2E1 = []; MiddleFreqE3E1 = []; MiddleFreqOn = []; MiddleFreqOff = []; MiddleFreqError = []; LowFreqE2E1 = []; LowFreqE3E1 = []; LowFreqOn = []; LowFreqOff = []; LowFreqError = []; for i = 1 : label_max if AllData(1,i) \u0026gt; 1000 HighFreqE2E1 = [ HighFreqE2E1 AllData(2,i) ]; HighFreqE3E1 = [ HighFreqE3E1 AllData(3,i) ]; HighFreqOn = [ HighFreqOn AllData(4,i) ] ; HighFreqOff = [ HighFreqOff AllData(5,i) ]; HighFreqError = [ HighFreqError AllData(6,i) ]; elseif AllData(1,i) \u0026lt; 500 LowFreqE2E1 = [ LowFreqE2E1 AllData(2,i) ]; LowFreqE3E1 = [ LowFreqE3E1 AllData(3,i) ]; LowFreqOn = [ LowFreqOn AllData(4,i) ] ; LowFreqOff = [ LowFreqOff AllData(5,i) ]; LowFreqError = [ LowFreqError AllData(6,i) ]; else MiddleFreqE2E1 = [ MiddleFreqE2E1 AllData(2,i) ]; MiddleFreqE3E1 = [ MiddleFreqE3E1 AllData(3,i) ]; MiddleFreqOn = [ MiddleFreqOn AllData(4,i) ] ; MiddleFreqOff = [ MiddleFreqOff AllData(5,i) ]; MiddleFreqError = [ MiddleFreqError AllData(6,i) ]; end end MeanValue1 = 0; HighFreqE2E1_sort_set = []; for i = 1 : size( HighFreqE2E1, 2 ) HighFreqE2E1_sort = sort( HighFreqE2E1 ); if HighFreqE2E1_sort(:,i) \u0026lt; 2 MeanValue1 = ( MeanValue1*(i-1) + HighFreqE2E1_sort(:,i) )/i; else HighFreqE2E1_sort(:,i) = MeanValue1; end HighFreqE2E1_sort_set = [ HighFreqE2E1_sort_set HighFreqE2E1_sort(i) ]; end MeanValue2 = 0; HighFreqE3E1_sort_set = []; for i = 1 : size( HighFreqE3E1, 2 ) HighFreqE3E1_sort = sort( HighFreqE3E1 ); if HighFreqE3E1_sort(:,i) \u0026lt; 2 MeanValue2 = ( MeanValue2*(i-1) + HighFreqE3E1_sort(:,i) )/i; else HighFreqE3E1_sort(:,i) = MeanValue1; end HighFreqE3E1_sort_set = [ HighFreqE3E1_sort_set HighFreqE3E1_sort(i) ]; end MeanValue3 = 0; HighFreqOn_sort_set = []; for i = 1 : size( HighFreqOn, 2 ) HighFreqOn_sort = sort( HighFreqOn ); if HighFreqOn_sort(:,i) \u0026lt; 2 MeanValue3 = ( MeanValue3*(i-1) + HighFreqOn_sort(:,i) )/i; else HighFreqOn_sort(:,i) = MeanValue3; end HighFreqOn_sort_set = [ HighFreqOn_sort_set HighFreqOn_sort(i) ]; end MeanValue4 = 0; HighFreqOff_sort_set = []; for i = 1 : size( HighFreqOff, 2 ) HighFreqOff_sort = sort( HighFreqOff ); if HighFreqOff_sort(:,i) \u0026lt; 2 MeanValue4 = ( MeanValue4*(i-1) + HighFreqOff_sort(:,i) )/i; else HighFreqOff_sort(:,i) = MeanValue4; end HighFreqOff_sort_set = [ HighFreqOff_sort_set HighFreqOff_sort(i) ]; end MeanValue5 = 0; HighFreqError_sort_set = []; for i = 1 : size( HighFreqError, 2 ) HighFreqError_sort = sort( HighFreqError ); if HighFreqError_sort(i) \u0026lt; 10 MeanValue5 = ( MeanValue5*(i-1) + HighFreqError_sort(i) )/i; else HighFreqError_sort(i) = MeanValue5; end HighFreqError_sort_set = [ HighFreqError_sort_set HighFreqError_sort(i) ]; end MeanValue6 = 0; MiddleFreqE2E1_sort_set = []; for i = 1 : size( MiddleFreqE2E1, 2 ) MiddleFreqE2E1_sort = sort( MiddleFreqE2E1 ); if MiddleFreqE2E1_sort(:,i) \u0026lt; 2 MeanValue6 = ( MeanValue6*(i-1) + MiddleFreqE2E1_sort(:,i) )/i; else MiddleFreqE2E1_sort(:,i) = MeanValue1; end MiddleFreqE2E1_sort_set = [ MiddleFreqE2E1_sort_set MiddleFreqE2E1_sort(i) ]; end MeanValue7 = 0; MiddleFreqE3E1_sort_set = []; for i = 1 : size( MiddleFreqE3E1, 2 ) MiddleFreqE3E1_sort = sort( MiddleFreqE3E1 ); if MiddleFreqE3E1_sort(:,i) \u0026lt; 2 MeanValue7 = ( MeanValue7*(i-1) + MiddleFreqE3E1_sort(:,i) )/i; else MiddleFreqE3E1_sort(:,i) = MeanValue7; end MiddleFreqE3E1_sort_set = [ MiddleFreqE3E1_sort_set MiddleFreqE3E1_sort(i) ]; end MeanValue8 = 0; MiddleFreqOn_sort_set = []; for i = 1 : size( MiddleFreqOn, 2 ) MiddleFreqOn_sort = sort( MiddleFreqOn ); if MiddleFreqOn_sort(:,i) \u0026lt; 2 MeanValue8 = ( MeanValue8*(i-1) + MiddleFreqOn_sort(:,i) )/i; else MiddleFreqOn_sort(:,i) = MeanValue8; end MiddleFreqOn_sort_set = [ MiddleFreqOn_sort_set MiddleFreqOn_sort(i) ]; end MeanValue9 = 0; MiddleFreqOff_sort_set = []; for i = 1 : size( MiddleFreqOff, 2 ) MiddleFreqOff_sort = sort( MiddleFreqOff ); if MiddleFreqOff_sort(:,i) \u0026lt; 2 MeanValue9 = ( MeanValue9*(i-1) + MiddleFreqOff_sort(:,i) )/i; else MiddleFreqOff_sort(:,i) = MeanValue9; end MiddleFreqOff_sort_set = [ MiddleFreqOff_sort_set MiddleFreqOff_sort(i) ]; end MeanValue10 = 0; MiddleFreqError_sort_set = []; for i = 1 : size( MiddleFreqError, 2 ) MiddleFreqError_sort = sort( MiddleFreqError ); if MiddleFreqError_sort(i) \u0026lt; 10 MeanValue10 = ( MeanValue10*(i-1) + MiddleFreqError_sort(i) )/i; else MiddleFreqError_sort(i) = MeanValue10; end MiddleFreqError_sort_set = [ MiddleFreqError_sort_set MiddleFreqError_sort(i) ]; end MeanValue11 = 0; LowFreqE2E1_sort_set = []; for i = 1 : size( LowFreqE2E1, 2 ) LowFreqE2E1_sort = sort( LowFreqE2E1 ); if LowFreqE2E1_sort(:,i) \u0026lt; 2 MeanValue11 = ( MeanValue11*(i-1) + LowFreqE2E1_sort(:,i) )/i; else LowFreqE2E1_sort(:,i) = MeanValue11; end LowFreqE2E1_sort_set = [ LowFreqE2E1_sort_set LowFreqE2E1_sort(i) ]; end MeanValue12 = 0; LowFreqE3E1_sort_set = []; for i = 1 : size( LowFreqE3E1, 2 ) LowFreqE3E1_sort = sort( LowFreqE3E1 ); if LowFreqE3E1_sort(:,i) \u0026lt; 2 MeanValue12 = ( MeanValue12*(i-1) + LowFreqE3E1_sort(:,i) )/i; else LowFreqE3E1_sort(:,i) = MeanValue12; end LowFreqE3E1_sort_set = [ LowFreqE3E1_sort_set LowFreqE3E1_sort(i) ]; end MeanValue13 = 0; LowFreqOn_sort_set = []; for i = 1 : size( LowFreqOn, 2 ) LowFreqOn_sort = sort( LowFreqOn ); if LowFreqOn_sort(:,i) \u0026lt; 2 MeanValue13 = ( MeanValue13*(i-1) + LowFreqOn_sort(:,i) )/i; else lowFreqOn_sort(:,i) = MeanValue13; end LowFreqOn_sort_set = [ LowFreqOn_sort_set LowFreqOn_sort(i) ]; end MeanValue14 = 0; LowFreqOff_sort_set = []; for i = 1 : size( LowFreqOff, 2 ) LowFreqOff_sort = sort( LowFreqOff ); if LowFreqOff_sort(:,i) \u0026lt; 2 MeanValue14 = ( MeanValue14*(i-1) + LowFreqOff_sort(:,i) )/i; else LowFreqOff_sort(:,i) = MeanValue14; end LowFreqOff_sort_set = [ LowFreqOff_sort_set LowFreqOff_sort(i) ]; end MeanValue15 = 0; LowFreqError_sort_set = []; for i = 1 : size( LowFreqError, 2 ) LowFreqError_sort = sort( LowFreqError ); if LowFreqError_sort(i) \u0026lt; 10 MeanValue15 = ( MeanValue15*(i-1) + LowFreqError_sort(i) )/i; else LowFreqError_sort(i) = MeanValue15; end LowFreqError_sort_set = [ LowFreqError_sort_set LowFreqError_sort(i) ]; end HighFreqE2E1_mean = mean( HighFreqE2E1_sort_set ) HighFreqE3E1_mean = mean( HighFreqE3E1_sort_set ) HighFreqOn_mean = mean( HighFreqOn_sort_set ) HighFreqOff_mean = mean( HighFreqOff_sort_set ) HighFreqError_mean = mean( HighFreqError_sort_set ) MiddleFreqE2E1_mean = mean( MiddleFreqE2E1_sort_set ) MiddleFreqE3E1_mean = mean( MiddleFreqE3E1_sort_set ) MiddleFreqOn_mean = mean( MiddleFreqOn_sort_set ) MiddleFreqOff_mean = mean( MiddleFreqOff_sort_set ) MiddleFreqError_mean = mean( MiddleFreqError_sort_set ) LowFreqE2E1_mean = mean( LowFreqE2E1_sort_set ) LowFreqE3E1_mean = mean( LowFreqE3E1_sort_set ) LowFreqOn_mean = mean( LowFreqOn_sort_set ) LowFreqOff_mean = mean( LowFreqOff_sort_set ) LowFreqError_mean = mean( LowFreqError_sort_set ) SignalFeature = [ HighFreqE2E1_mean, HighFreqE3E1_mean, ... HighFreqOn_mean, HighFreqOff_mean, HighFreqError_mean, ... MiddleFreqE2E1_mean, MiddleFreqE3E1_mean, ... MiddleFreqOn_mean, MiddleFreqOff_mean, MiddleFreqError_mean, ... LowFreqE2E1_mean, LowFreqE3E1_mean, ... LowFreqOn_mean, LowFreqOff_mean, LowFreqError_mean ] SignalFeature_kmeans = lbgVQ( SignalFeature, 4); load(\u0026#39;library_cello1.mat\u0026#39;) d1_set = []; for i = 1 : size(library_cello1,3) d1(i) = distanceEu( SignalFeature, library_cello1(:,:,i) ); d1_set = [ d1_set d1(i) ]; end d1_data = sum( d1_set )/size(library_cello1,3); load(\u0026#39;library_cello2.mat\u0026#39;) d2_set = []; for i = 1 : size(library_cello2,3) d2(i) = distanceEu( SignalFeature, library_cello2(:,:,i) ); d2_set = [ d2_set d2(i) ]; end d2_data = sum( d2_set )/size(library_cello2,3); load(\u0026#39;library_guitar1.mat\u0026#39;) d3_set = []; for i = 1 : size(library_guitar1,3) d3(i) = distanceEu( SignalFeature, library_guitar1(:,:,i) ); d3_set = [ d3_set d3(i) ]; end d3_data = sum( d3_set )/size(library_guitar1,3); load(\u0026#39;library_guitar2.mat\u0026#39;) d4_set = []; for i = 1 : size(library_guitar2,3) d4(i) = distanceEu( SignalFeature, library_guitar2(:,:,i) ); d4_set = [ d4_set d4(i) ]; end d4_data = sum( d4_set )/size(library_guitar2,3); load(\u0026#39;library_guitar3.mat\u0026#39;) d5_set = []; for i = 1 : size(library_guitar3,3) d5(i) = distanceEu( SignalFeature, library_guitar3(:,:,i) ); d5_set = [ d5_set d5(i) ]; end d5_data = sum( d5_set )/size(library_guitar3,3); load(\u0026#39;library_piano1.mat\u0026#39;) d6_set = []; for i = 1 : size(library_piano1,3) d6(i) = distanceEu( SignalFeature, library_piano1(:,:,i) ); d6_set = [ d6_set d6(i) ]; end d6_data = sum( d6_set )/size(library_piano1,3); load(\u0026#39;library_piano2.mat\u0026#39;) d7_set = []; for i = 1 : size(library_piano2,3) d7(i) = distanceEu( SignalFeature, library_piano2(:,:,i) ); d7_set = [ d7_set d7(i) ]; end d7_data = sum( d7_set )/size(library_piano2,3); load(\u0026#39;library_piano3.mat\u0026#39;) % electro piano d8_set = []; for i = 1 : size(library_piano3,3) d8(i) = distanceEu( SignalFeature, library_piano3(:,:,i) ); d8_set = [ d8_set d8(i) ]; end d8_data = sum( d8_set )/size(library_piano3,3); % Recoginition RecogData = [ d1_data d2_data d3_data d4_data d5_data d6_data d7_data d8_data ] if ( min( RecogData ) == d1_data ) || ( min( RecogData ) == d2_data ) fprintf(\u0026#39;The signal is Cello. \u0026#39;) elseif ( min( RecogData ) == d3_data ) || ( min( RecogData ) == d4_data ) || ( min( RecogData ) == d5_data ) fprintf(\u0026#39;The signal is Guitar. \u0026#39;) elseif ( min( RecogData ) == d6_data ) || ( min( RecogData ) == d7_data ) || ( min( RecogData ) == d8_data ) fprintf(\u0026#39;The signal is Piano. \u0026#39;) end ","permalink":"https://NTUneillee.github.io/blog/post1/","tags":["Signal Processing","Matlab","Time Frequency Analysis"],"title":"Instrument Recognition Project"}]